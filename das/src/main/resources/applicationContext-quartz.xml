<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<bean id="propertiesPlaceholder" 
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">  
       		<list>  
            	<value>classpath:local.properties</value>  
        	</list>  
    	</property>
	</bean>
	
	<!-- 扫描包 -->  
	<context:component-scan base-package="com.agama.das"/>
	
	<bean id="executor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数，默认为1 -->
		<property name="corePoolSize" value="10" />
		<!-- 最大线程数，默认为Integer.MAX_VALUE -->
		<property name="maxPoolSize" value="200" />
		<!-- 线程池维护线程所允许的空闲时间，默认为60s -->
		<property name="keepAliveSeconds" value="400" />
		<!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE -->
		<property name="queueCapacity" value="800" />
		<!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
        <property name="rejectedExecutionHandler">
            <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
            <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
            <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
        </property>
	</bean>

	<bean id="scheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
 				<ref bean="hostTrigger"/>
 				<ref bean="interactTrigger"/>
			</list>
		</property>
		<property name="taskExecutor" ref="executor" />
	</bean>
	
	<!-- 主机巡检任务 -->
	<bean id="hostTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="hostJobDetail" />
		<property name="startDelay" value="4000" /><!-- 调度工厂实例化后，经过0秒开始执行调度 -->
		<property name="repeatInterval" value="${hostTrigger}" />
	</bean>
	<bean id="hostJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<bean class="com.agama.das.quartz.ExecuteTask" />
		</property>
		<property name="targetMethod" value="checkRunStatusForHost" />
		<property name="concurrent" value="false" /><!-- 作业不并发调度 -->
	</bean>
	
	<!-- 与管理中心数据交互的任务 -->
	<bean id="interactTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="dataInteractJobDetail" />
		<property name="startDelay" value="4000" /><!-- 调度工厂实例化后，经过0秒开始执行调度 -->
		<property name="repeatInterval" value="${interactTrigger}" />
	</bean>	
	<bean id="dataInteractJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<bean class="com.agama.das.quartz.ExecuteTask" />
		</property>
		<property name="targetMethod" value="dataInteractTask" />
		<property name="concurrent" value="false" /><!-- 作业不并发调度 -->
	</bean>
	
</beans>